name: Deploy Workflow
 
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
 
permissions:
  id-token: write
  contents: write
  pull-requests: write
 
jobs:
  terraform:
    runs-on: ubuntu-latest
 
    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
 
      # Step 2: Configure AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-south-1'
 
      # Step 3: Setup Terraform 
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
 
      # Step 4: Install terraform-docs
      - name: Install terraform-docs
        run: |
          curl -sSL https://github.com/terraform-docs/terraform-docs/releases/download/v0.16.0/terraform-docs-v0.16.0-linux-amd64.tar.gz | tar -xz -C /usr/local/bin
          terraform-docs --version  # Verify installation
 
      # Step 5: Terraform Init
      - name: Terraform Init
        run: terraform init -reconfigure
 
      # Step 6: Terraform Plan
      - name: Terraform Plan
        run: terraform plan -lock=false -out=plan.tfplan
 
      # Step 7: Generate Terraform Documentation (Markdown)
      - name: Generate Markdown with Terraform Docs
        run: |
          terraform-docs markdown . > README.md
        if: github.event_name == 'push' || github.event_name == 'pull_request'
 
      # Step 8: Commit and Push Terraform Docs (Optional for review) 
      - name: Commit and Push Terraform Docs
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add README.md plan.tfplan # Add necessary files
          git status # Show files to be committed for debugging
          git commit -m "Update Terraform Docs" || echo "No changes to commit" # Handle case where no changes are found
          git push origin ${{ github.ref }} # Push changes
 
 
      # Step 9: Apply Terraform Configuration (when PR is merged)
      - name: Apply Terraform Configuration on PR Merge
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          terraform apply -auto-approve -lock=false plan.tfplan
